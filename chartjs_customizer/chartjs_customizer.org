* Dealing with Axes
** example 1
const myChart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            data: [20, 50, 100, 75, 25, 0],
            label: 'Left dataset',

            // This binds the dataset to the left y axis
            yAxisID: 'left-y-axis'
        }, {
            data: [0.1, 0.5, 1.0, 2.0, 1.5, 0],
            label: 'Right dataset',

            // This binds the dataset to the right y axis
            yAxisID: 'right-y-axis'
        }],
        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
    },
    options: {
        scales: {
            'left-y-axis': {
                type: 'linear',
                position: 'left'
            },
            'right-y-axis': {
                type: 'linear',
                position: 'right'
            }
        }
    }
});


** example 4
options: {
    scales: {
      xAxis: {
        // The axis for this scale is determined from the first letter of the id as `'x'`
        // It is recommended to specify `position` and / or `axis` explicitly.
        type: 'time',
      }
      
** example 3
 options: {
        scales: {
            y: {
            
** example 2
options: {
  scales: {
    xAxes: [{
      id: 'x',
      type: 'time',
      display: true,
      title: {
        display: true,
        text: 'Date'
      },
      ticks: {
        major: {
          enabled: true
        },
        font: function(context) {
          if (context.tick && context.tick.major) {
            return {
              weight: 'bold',
              color: '#FF0000'
            };
          }
        }
      }
    }],
    yAxes: [{
      id: 'y',
      display: true,
      title: {
        display: true,
        text: 'value'
      }
    }]
  }
}

** another
var canvas = document.getElementById('chart');
new Chart(canvas, {
  type: 'line',
  data: {
    labels: ['1', '2', '3', '4', '5'],
    datasets: [{
      label: 'A',
      yAxisID: 'A',
      data: [100, 96, 84, 76, 69]
    }, {
      label: 'B',
      yAxisID: 'B',
      data: [1, 1, 1, 1, 0]
    }]
  },
  options: {
    scales: {
      yAxes: [{
        id: 'A',
        type: 'linear',
        position: 'left',
      }, {
        id: 'B',
        type: 'linear',
        position: 'right',
        ticks: {
          max: 1,
          min: 0
        }
      }]
    }
  }
});


** multiple chart axis
const myChart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            data: [20, 50, 100, 75, 25, 0],
            label: 'Left dataset',

            // This binds the dataset to the left y axis
            yAxisID: 'left-y-axis'
        }, {
            data: [0.1, 0.5, 1.0, 2.0, 1.5, 0],
            label: 'Right dataset',

            // This binds the dataset to the right y axis
            yAxisID: 'right-y-axis'
        }],
        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']
    },
    options: {
        scales: {
            'left-y-axis': {
                type: 'linear',
                position: 'left'
            },
            'right-y-axis': {
                type: 'linear',
                position: 'right'
            }
        }
    }
});



* TODOs
** ability to configure each line:

select dataset: 0 1 2 3 5
line config panel

update data.datasets[0]

would have to done separately




** why is add_cfg.plugins.tooltips gets called twice


** legend options are not working as expected
** the dreaded adictchanged during iteration bug
** deal with scaleID: this is hard-- since it is provided by user

** TODO  Bar Configuration
** Arc Configutation
https://www.chartjs.org/docs/latest/configuration/elements.html#bar-configuration

** TODO generic way to handle aenums
in get_defaultVal, uic_generator , etc.
** deal with fonts
https://www.chartjs.org/docs/latest/general/fonts.html

Legend Label Configuration

onClick
onHover
textDirection

basically add more config crap
https://www.chartjs.org/docs/latest/configuration/elements.html
https://www.chartjs.org/docs/latest/general/fonts.html

* line/point backgroundcolor not working

** deal with locale
i3 keyboard mapping

* Development notes

** chartcfg
*** update_chartcfg
take

** subgroup_iter : 
** group
** update_cfgattrmeta(cjs_cfg, cfgAttrMeta)
look at new changes in cjs_cfg -- make  associated attributes in cfgAttrMeta active

* Journal and todos
** TODO stackW in cfgpanel_sbs for gutter width

* enough
** all ColorSelector  should be populated have default value

* Vocabulary
** cfgattrmeta
a really bad name
-- for chartjs-config-attributes and its metadata details.
** cjs_cfg
keeps track of user prefrences
** ui_cfg
keeps track of ui elements

** cjs_plt_cfg
the cfg for chartjs


* Asthetics todo
select box color gray/1


* requirement
** github
versa-engine
addict
justpy-chartjs
** pip
jsbeautifier
demjson3



* Programming Guidelines
** attrmeta.py
all things about attrmeta.
attrmeta contains metadata abouts config attributes
** cfgattrmeta
is a json/addict that over attrmeta in same path order as chartjs might expect it.
** update_cfgattrmeta when uielem state changes on front end.
update cfgattrmeta if  uielem state changes on front end.
attrmeta_in_context((kpath, value), cfgattrmeta)  will return all attrmeta that are active
in that ui_state
** update cjs_cfg
for all the newly active attrmeta -- add the corresponding kpath and default value to cjs_cfg




* various ways to configure chartjs

*** title attr config




*** TODO background as pattern
#+BEGIN_SRC
  const img = new Image();
img.src = 'https://example.com/my_image.png';
img.onload = function() {
    const ctx = document.getElementById('canvas').getContext('2d');
    const fillPattern = ctx.createPattern(img, 'repeat');
    const chart = new Chart(ctx, {
        data: {
            labels: ['Item 1', 'Item 2', 'Item 3'],
            datasets: [{
                data: [10, 20, 30],
                backgroundColor: fillPattern
            }]
        }
    });
};
#+END_SRC


#+BEGIN_SRC
const chartData = {
    datasets: [{
        data: [45, 25, 20, 10],
        backgroundColor: [
            pattern.draw('square', '#ff6384'),
            pattern.draw('circle', '#36a2eb'),
            pattern.draw('diamond', '#cc65fe'),
            pattern.draw('triangle', '#ffce56')
        ]
    }],
    labels: ['Red', 'Blue', 'Purple', 'Yellow']
};
#+END_SRC

** data
type
data(datasets, labels)
*** multiline labels
*** TODO custom  data access paths
parsing/xAxisKey
parsing/yAxisKey
*** TODO pie/doughnut chart type
type: 'doughnut',
data: {
    datasets: [{
        data: [{id: 'Sales', nested: {value: 1500}}, {id: 'Purchases', nested: {value: 500}}]
    }]
},
options: {
    parsing: {
        key: 'nested.value'
    }
}

In this mode, property name is used for index scale and value for value scale.
For vertical charts, index scale is x and value scale is y.

