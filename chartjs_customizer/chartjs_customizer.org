* Development notes
** subgroup_iter : 
** group
** update_cfgattrmeta(cjs_cfg, cfgAttrMeta)
look at new changes in cjs_cfg -- make  associated attributes in cfgAttrMeta active

* Journal and todos
** TODO stackW in cfgpanel_sbs for gutter width

* enough
** all ColorSelector  should be populated have default value

* Vocabulary
** cfgattrmeta
a really bad name
-- for chartjs-config-attributes and its metadata details.
** cjs_cfg
keeps track of user prefrences
** ui_cfg
keeps track of ui elements

** cjs_plt_cfg
the cfg for chartjs


* Asthetics todo
select box color gray/1


* requirement
** github
versa-engine
addict
justpy-chartjs
** pip
jsbeautifier
demjson3



* Programming Guidelines
** attrmeta.py
all things about attrmeta.
attrmeta contains metadata abouts config attributes
** cfgattrmeta
is a json/addict that over attrmeta in same path order as chartjs might expect it.
** update_cfgattrmeta when uielem state changes on front end.
update cfgattrmeta if  uielem state changes on front end.
attrmeta_in_context((kpath, value), cfgattrmeta)  will return all attrmeta that are active
in that ui_state
** update cjs_cfg
for all the newly active attrmeta -- add the corresponding kpath and default value to cjs_cfg




* various ways to configure chartjs

*** title attr config




*** TODO background as pattern
#+BEGIN_SRC
  const img = new Image();
img.src = 'https://example.com/my_image.png';
img.onload = function() {
    const ctx = document.getElementById('canvas').getContext('2d');
    const fillPattern = ctx.createPattern(img, 'repeat');
    const chart = new Chart(ctx, {
        data: {
            labels: ['Item 1', 'Item 2', 'Item 3'],
            datasets: [{
                data: [10, 20, 30],
                backgroundColor: fillPattern
            }]
        }
    });
};
#+END_SRC


#+BEGIN_SRC
const chartData = {
    datasets: [{
        data: [45, 25, 20, 10],
        backgroundColor: [
            pattern.draw('square', '#ff6384'),
            pattern.draw('circle', '#36a2eb'),
            pattern.draw('diamond', '#cc65fe'),
            pattern.draw('triangle', '#ffce56')
        ]
    }],
    labels: ['Red', 'Blue', 'Purple', 'Yellow']
};
#+END_SRC

** data
type
data(datasets, labels)
*** multiline labels
*** TODO custom  data access paths
parsing/xAxisKey
parsing/yAxisKey
*** TODO pie/doughnut chart type
type: 'doughnut',
data: {
    datasets: [{
        data: [{id: 'Sales', nested: {value: 1500}}, {id: 'Purchases', nested: {value: 500}}]
    }]
},
options: {
    parsing: {
        key: 'nested.value'
    }
}

In this mode, property name is used for index scale and value for value scale.
For vertical charts, index scale is x and value scale is y.

